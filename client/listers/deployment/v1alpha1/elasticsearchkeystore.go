/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ec-api/apis/deployment/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticsearchKeystoreLister helps list ElasticsearchKeystores.
// All objects returned here must be treated as read-only.
type ElasticsearchKeystoreLister interface {
	// List lists all ElasticsearchKeystores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchKeystore, err error)
	// ElasticsearchKeystores returns an object that can list and get ElasticsearchKeystores.
	ElasticsearchKeystores(namespace string) ElasticsearchKeystoreNamespaceLister
	ElasticsearchKeystoreListerExpansion
}

// elasticsearchKeystoreLister implements the ElasticsearchKeystoreLister interface.
type elasticsearchKeystoreLister struct {
	indexer cache.Indexer
}

// NewElasticsearchKeystoreLister returns a new ElasticsearchKeystoreLister.
func NewElasticsearchKeystoreLister(indexer cache.Indexer) ElasticsearchKeystoreLister {
	return &elasticsearchKeystoreLister{indexer: indexer}
}

// List lists all ElasticsearchKeystores in the indexer.
func (s *elasticsearchKeystoreLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchKeystore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchKeystore))
	})
	return ret, err
}

// ElasticsearchKeystores returns an object that can list and get ElasticsearchKeystores.
func (s *elasticsearchKeystoreLister) ElasticsearchKeystores(namespace string) ElasticsearchKeystoreNamespaceLister {
	return elasticsearchKeystoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticsearchKeystoreNamespaceLister helps list and get ElasticsearchKeystores.
// All objects returned here must be treated as read-only.
type ElasticsearchKeystoreNamespaceLister interface {
	// List lists all ElasticsearchKeystores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchKeystore, err error)
	// Get retrieves the ElasticsearchKeystore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ElasticsearchKeystore, error)
	ElasticsearchKeystoreNamespaceListerExpansion
}

// elasticsearchKeystoreNamespaceLister implements the ElasticsearchKeystoreNamespaceLister
// interface.
type elasticsearchKeystoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticsearchKeystores in the indexer for a given namespace.
func (s elasticsearchKeystoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchKeystore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchKeystore))
	})
	return ret, err
}

// Get retrieves the ElasticsearchKeystore from the indexer for a given namespace and name.
func (s elasticsearchKeystoreNamespaceLister) Get(name string) (*v1alpha1.ElasticsearchKeystore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticsearchkeystore"), name)
	}
	return obj.(*v1alpha1.ElasticsearchKeystore), nil
}
