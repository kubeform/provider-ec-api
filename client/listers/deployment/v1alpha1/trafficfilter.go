/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ec-api/apis/deployment/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficFilterLister helps list TrafficFilters.
// All objects returned here must be treated as read-only.
type TrafficFilterLister interface {
	// List lists all TrafficFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficFilter, err error)
	// TrafficFilters returns an object that can list and get TrafficFilters.
	TrafficFilters(namespace string) TrafficFilterNamespaceLister
	TrafficFilterListerExpansion
}

// trafficFilterLister implements the TrafficFilterLister interface.
type trafficFilterLister struct {
	indexer cache.Indexer
}

// NewTrafficFilterLister returns a new TrafficFilterLister.
func NewTrafficFilterLister(indexer cache.Indexer) TrafficFilterLister {
	return &trafficFilterLister{indexer: indexer}
}

// List lists all TrafficFilters in the indexer.
func (s *trafficFilterLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficFilter))
	})
	return ret, err
}

// TrafficFilters returns an object that can list and get TrafficFilters.
func (s *trafficFilterLister) TrafficFilters(namespace string) TrafficFilterNamespaceLister {
	return trafficFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficFilterNamespaceLister helps list and get TrafficFilters.
// All objects returned here must be treated as read-only.
type TrafficFilterNamespaceLister interface {
	// List lists all TrafficFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficFilter, err error)
	// Get retrieves the TrafficFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficFilter, error)
	TrafficFilterNamespaceListerExpansion
}

// trafficFilterNamespaceLister implements the TrafficFilterNamespaceLister
// interface.
type trafficFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficFilters in the indexer for a given namespace.
func (s trafficFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficFilter))
	})
	return ret, err
}

// Get retrieves the TrafficFilter from the indexer for a given namespace and name.
func (s trafficFilterNamespaceLister) Get(name string) (*v1alpha1.TrafficFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficfilter"), name)
	}
	return obj.(*v1alpha1.TrafficFilter), nil
}
