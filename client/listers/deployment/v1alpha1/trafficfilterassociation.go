/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ec-api/apis/deployment/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficFilterAssociationLister helps list TrafficFilterAssociations.
// All objects returned here must be treated as read-only.
type TrafficFilterAssociationLister interface {
	// List lists all TrafficFilterAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficFilterAssociation, err error)
	// TrafficFilterAssociations returns an object that can list and get TrafficFilterAssociations.
	TrafficFilterAssociations(namespace string) TrafficFilterAssociationNamespaceLister
	TrafficFilterAssociationListerExpansion
}

// trafficFilterAssociationLister implements the TrafficFilterAssociationLister interface.
type trafficFilterAssociationLister struct {
	indexer cache.Indexer
}

// NewTrafficFilterAssociationLister returns a new TrafficFilterAssociationLister.
func NewTrafficFilterAssociationLister(indexer cache.Indexer) TrafficFilterAssociationLister {
	return &trafficFilterAssociationLister{indexer: indexer}
}

// List lists all TrafficFilterAssociations in the indexer.
func (s *trafficFilterAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficFilterAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficFilterAssociation))
	})
	return ret, err
}

// TrafficFilterAssociations returns an object that can list and get TrafficFilterAssociations.
func (s *trafficFilterAssociationLister) TrafficFilterAssociations(namespace string) TrafficFilterAssociationNamespaceLister {
	return trafficFilterAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficFilterAssociationNamespaceLister helps list and get TrafficFilterAssociations.
// All objects returned here must be treated as read-only.
type TrafficFilterAssociationNamespaceLister interface {
	// List lists all TrafficFilterAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficFilterAssociation, err error)
	// Get retrieves the TrafficFilterAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficFilterAssociation, error)
	TrafficFilterAssociationNamespaceListerExpansion
}

// trafficFilterAssociationNamespaceLister implements the TrafficFilterAssociationNamespaceLister
// interface.
type trafficFilterAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficFilterAssociations in the indexer for a given namespace.
func (s trafficFilterAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficFilterAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficFilterAssociation))
	})
	return ret, err
}

// Get retrieves the TrafficFilterAssociation from the indexer for a given namespace and name.
func (s trafficFilterAssociationNamespaceLister) Get(name string) (*v1alpha1.TrafficFilterAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficfilterassociation"), name)
	}
	return obj.(*v1alpha1.TrafficFilterAssociation), nil
}
